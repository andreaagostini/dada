<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="dada.nodes" module="dada">

	<digest>
		Interpolate pitches with a 2D interface
	</digest>

	<description>
		Displays pitches in a 2-dimensional space, and interpolates between them
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">dada</metadata>
		<metadata name="tag">dada interfaces</metadata>
		<metadata name="tag">dada geometry</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Incoming symbol or list
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Dump outlet
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Knob pitch and velocity
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Queries and notifications
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				bang when object is changed via the interface
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(drag)">
			<arglist />
			<digest>
				Load file or set background image
			</digest>
			<description>
				Dragging an llll or text file on the object will load its content, if a proper readable format is recognized.
				If the file is an image, it will be loaded as object background (whenever meaningful)
			</description>
		</method>
		<method name="(keyboard)">
			<arglist />
			<digest>
				Undo/Redo
			</digest>
			<description>
				// • <m>Cmd+Z</m> (mac) or <m>Ctrl+Z</m> (win): perform undo step<br />
				• <m>Cmd+Shift+Z</m> (mac) or <m>Ctrl+Y</m> (win): perform redo step<br />
			</description>
		</method>
		<method name="(mouse)">
			<arglist />
			<digest>
				Edit content
			</digest>
			<description>
				// Specific commands: <br />
				• <m>click</m> or <m>click+drag</m>: set tester and output interpolated pitch and velocity content<br />
				• <m>Alt+click+drag</m> on a node: duplicate node<br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a node: delete node<br />
			</description>
		</method>
		<method name="(tools)">
			<arglist />
			<digest>
				Navigate or edit content
			</digest>
			<description>
				// @copy DADA_DOC_TOOLS_ZX
			</description>
		</method>
		<method name="addnode">
			<arg name="node_syntax" optional="0" type="llll" />
			<digest>
				Add a node
			</digest>
			<description>
				Adds a new node. The correct syntax is:
				<b>addnode <m>NODE_SYNTAX</m></b>, where the node syntax is the one
				documented in the <m>dump</m> message. The node syntax should NOT be wrapped in parenthesis.
				For instance, a valid message is: <b>addnode (coord -90. 20.) (pitch 6000) (vel 127)</b>
				After the node has been added, a notification is sent through the third outlet in the form
				<b>addnode <m>node_index</m></b>.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clear all nodes
			</digest>
			<description>
				Deletes all the nodes.
			</description>
		</method>
		<method name="deletenode">
			<arg name="node_index" optional="0" type="int" />
			<digest>
				Delete a node
			</digest>
			<description>
				Deletes the <m>N</m>-th node.
			</description>
		</method>
		<method name="domain">
			<arg name="arguments" optional="0" type="list" />
			<digest>
				Set the X domain
			</digest>
			<description>
				The <m>domain</m> message, followed by two numbers, sets minimum and maximum coordinates
				to be displayed on the X axis.
				The <m>domain</m> message,  followed by the "start" or "end" symbol and a number, sets the coordinate
				to be displayed respectively at the left boundary or at the right boundary of the object box.
			</description>
		</method>
		<method name="dump">
			<arglist />
			<digest>
				Output state
			</digest>
			<description>
				Outputs the current state of the object. The syntax is
				<b>nodes (nodes <m>NODE1</m> <m>NODE2</m>...) (testers <m>TESTER1</m> <m>TESTER2</m>...)</b>.
				Currently a single tester is supported. <br />
				Each node is in the syntax
				<b>(coord <m>x</m> <m>y</m>) (pitch <m>pitch_cents</m>) (velocity <m>vel</m>)</b>.<br />
				Each tester is in the syntax
				<b>(coord <m>x</m> <m>y</m>) (channel <m>MIDIchannel</m></b>.
			</description>
		</method>
		<method name="getdomain">
			<arglist />
			<digest>
				Retrieve current X domain
			</digest>
			<description>
				The <m>getdomain</m> message outputs from the third outlet the minimum and maximum
				coordinates displayed on the X axis, preceded by a <m>domain</m> symbol.
			</description>
		</method>
		<method name="getrange">
			<arglist />
			<digest>
				Retrieve current Y range
			</digest>
			<description>
				The <m>getrange</m> message outputs from the third outlet the minimum and maximum
				coordinates displayed on the Y axis, preceded by a <m>range</m> symbol.
			</description>
		</method>
		<method name="interp">
			<arg name="y" optional="0" type="float" />
			<digest>
				Output interpolated values
			</digest>
			<description>
				The symbol <m>interp</m> followed by two numbers <m>X</m> and <m>Y</m>
				outputs the interpolated values of pitch (in midicents) and velocity
				corresponding to the input (<m>X</m> <m>Y</m>) coordinates. The interpolated values are
				preceded by the "interp" symbol and output from the third outlet.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set state
			</digest>
			<description>
				Sets the current state of the object. The syntax must follow the one described in the
				<m>dump</m> message documentation (although nodes only or testers only can be assigned).
			</description>
		</method>
		<method name="range">
			<arg name="arguments" optional="0" type="list" />
			<digest>
				Set the Y range
			</digest>
			<description>
				The <m>range</m> message, followed by two numbers, sets minimum and maximum coordinates
				to be displayed on the Y axis
				The <m>range</m> message,  followed by the "start" or "end" symbol and a number, sets the coordinate
				to be displayed respectively at the bottom boundary or at top right boundary of the object box.
			</description>
		</method>
		<method name="read">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Load from disk
			</digest>
			<description>
				The specified file is read from disk and the llll it contains loaded as current state.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
		<method name="write">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save in native format
			</digest>
			<description>
				A <m>write</m> message will save the current state (as llll) in a file, in native format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
		<method name="writetxt">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save in text format
			</digest>
			<description>
				A <m>write</m> message will save the current state (as llll) in a file,
				in a human-readable text format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="coarse" get="1" set="1" type="int" size="1">
			<digest>
				Coarse Computing
			</digest>
			<description>
				Toggles coarse computing (faster, but less precise).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Coarse Computing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="knobcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Knob Color
			</digest>
			<description>
				Sets the color of the test cursors.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.3 0.3 0.3 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Knob Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="knobsize" get="1" set="1" type="float" size="1">
			<digest>
				Knob Size
			</digest>
			<description>
				Sets the knob size.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="5." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Knob Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxpitch" get="1" set="1" type="float" size="1">
			<digest>
				Maximum Pitch
			</digest>
			<description>
				Sets the pitch corresponding to the violet color.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="8400" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Pitch" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="middlecoctave" get="1" set="1" type="int" size="1">
			<digest>
				Middle C Octave
			</digest>
			<description>
				Sets the octave number of the middle C. By default this is 4 (meaning that C4 = Do4 is the middle C);
				values of 3 and 5 are also encountered. This value is used if <m>shownodes</m> is set to "Note Name".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="4" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Middle C Octave" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="minpitch" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Pitch
			</digest>
			<description>
				Sets the pitch corresponding to the red color.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="3600" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Pitch" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="nodesize" get="1" set="1" type="float" size="1">
			<digest>
				Pitch Node Size
			</digest>
			<description>
				Sets the node size for displayed pitches
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="2." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Pitch Node Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="notenamesstyle" get="1" set="1" type="int" size="1">
			<digest>
				Note Names Style
			</digest>
			<description>
				In the bach environment you can choose to represent note names in two different ways: either with the latin
				symbols (Do, Re, Mi, Fa, Sol, La, Si) or with the anglo-saxon letters (C, D, E, F, G, A, B).
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Note Names Style" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format, e
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="p" get="1" set="1" type="float" size="1">
			<digest>
				Inverse Distance Exponent
			</digest>
			<description>
				Sets the exponent for the inverse distance function.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Inverse Distance Exponent" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="presentation_rect" get="1" set="1" type="" size="1">
			<digest>
				
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="default" get="1" set="1" type="" size="1" value="0 0 300 300" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="showknob" get="1" set="1" type="int" size="1">
			<digest>
				Show Knob
			</digest>
			<description>
				Toggles the visibility of the testing knob.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Knob" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="shownodes" get="1" set="1" type="int" size="1">
			<digest>
				Show Pitch Nodes
			</digest>
			<description>
				Toggles the visibility of the nodes.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Pitch Nodes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showvelocity" get="1" set="1" type="int" size="1">
			<digest>
				Show Velocity
			</digest>
			<description>
				Sets the fashion in which velocity is displayed.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="tonedivision" get="1" set="1" type="int" size="1">
			<digest>
				Microtonal Division
			</digest>
			<description>
				In the bach environment, the tone division defines the microtonal accuracy of the symbolic representation,
				by representing the number of steps in which each tone is divided.
				For the standard semitonal representation (where just sharps and flats suffice), one can stick with
				<m>tonedivision</m> being 2, meaning: the tone is divided into two semitones.
				By increasing this value, the microtonal grid gets more dense: for instance, 4 is the quartertonal grid
				(where each tone is divided in 4 quartertones); 8 is the eight-tonal grid, and so on.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Microtonal Division" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Some pitch nodes are defined inside the 2d space, each node has some coordinates, a pitch and a velocity.
		The pitch in each point of the 2d space is given as a result of a inverse distance weighting interpolation
		of all pitches. Some test cursor are then defined, which can be moved around the space in order to retrieve
		information about pitch and velocity.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.tonnetz" />
		<seealso name="nodes" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (anything)">
			<description>
				Incoming symbol or list.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Dump outlet.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Knob pitch and velocity.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Queries and notifications.
			</description>
		</entry>
		<entry name ="Outlet 4 (bang)">
			<description>
				bang when object is changed via the interface.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Some pitch nodes are defined inside the 2d space, each node has some coordinates, a pitch and a velocity.
		The pitch in each point of the 2d space is given as a result of a inverse distance weighting interpolation
		of all pitches. Some test cursor are then defined, which can be moved around the space in order to retrieve
		information about pitch and velocity.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
node, distance, surface, pitch, explore, node, interpolate.
			</description>
		</entry>
	</misc>

</c74object>