<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="dada.pareto" module="dada">

	<digest>
		Musical pattern paretoing
	</digest>

	<description>
		paretoes subsequences of a <o>bach.roll</o> via a lambda loop, in a combinatorial fashion
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">dada scores</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Trigger Calculation
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Bricks
			</digest>
			<description>
				The elements which will compose the solution
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Lambda Inlet
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is some calculation triggered on the elements which had been sent out. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Pareto Front
			</digest>
			<description>
				The pareto form is output in the form <b><m>content</m> <m>indices</m> <m>scores</m></b>
				for each element of the pareto front. Scores are output as <b>(<m>objective_symbol</m> <m>score_value</m>)</b>.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Lambda Outlet
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, on the elements output from the lambda outlet may be performed some calculation, taken than into
				account by the algorithm (just use patching and then plug into the lambda inlet the
				result of the calculation). <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="maxbricks" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Number of Bricks for A Candidate
			</digest>
			<description>
				Sets the maximum number of bricks composing a candidate (and hence a solution).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Number of Bricks for A Candidate" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="obj" get="1" set="1" type="sym_array" size="0">
			<digest>
				Objectives
			</digest>
			<description>
				Sets the number of objectives.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Objectives" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format, e
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="removedup" get="1" set="1" type="int" size="1">
			<digest>
				Remove Duplicates
			</digest>
			<description>
				Toggles the ability to remove duplicates in the pareto front.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Remove Duplicates" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="repetition" get="1" set="1" type="int" size="1">
			<digest>
				Allow Repetition of Bricks
			</digest>
			<description>
				Toggles the ability to allow the repetition of bricks inside the solution.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Repetition of Bricks" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="start" get="1" set="1" type="llll" size="1">
			<digest>
				Starting Element
			</digest>
			<description>
				Sets the starting (or "empty") element. By default it is the <m>null</m> list.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Starting Element" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The <m>dur</m>, <m>numchords</m>, <m>numnotes</m>, <m>maxnumchordsgap</m> attributes highly affect
		the speed of the algorithm, and should be set as tightly as possible for the best performances.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="dada.segment" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (bang)">
			<description>
				Trigger Calculation.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Bricks.
				The elements which will compose the solution
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Lambda Inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is some calculation triggered on the elements which had been sent out. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Pareto Front.
				The pareto form is output in the form <b><m>content</m> <m>indices</m> <m>scores</m></b>
				for each element of the pareto front. Scores are output as <b>(<m>objective_symbol</m> <m>score_value</m>)</b>.
			</description>
		</entry>
		<entry name ="Outlet 2 (bang)">
			<description>
				Lambda Outlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, on the elements output from the lambda outlet may be performed some calculation, taken than into
				account by the algorithm (just use patching and then plug into the lambda inlet the
				result of the calculation). <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The <m>dur</m>, <m>numchords</m>, <m>numnotes</m>, <m>maxnumchordsgap</m> attributes highly affect
		the speed of the algorithm, and should be set as tightly as possible for the best performances.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
pattern, subpattern, pareto, label, name, find.
			</description>
		</entry>
	</misc>

</c74object>